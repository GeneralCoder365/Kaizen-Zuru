<!DOCTYPE html>
<html>
<head>
    <!--Sets metadata-->
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <!--Sets page title-->
    <title>Kaizen Zuru Click Animation Practice</title>
</head>
<body>
    <!--Creates canvas-->
    <canvas id="myCanvas" width=w height=h style="border:1px solid #d3d3d3; margin-left: 700px; margin-top: 240px;">
        Your browser does not support the HTML5 canvas tag.</canvas>
    <script>
        //calls canvas & sets to size of window
        var c = document.getElementById("myCanvas");
        c.position = (100,100);
        var w = screen.width;
        var h = screen.height;
        c.width = (2*w)/8;
        c.height = (3*h)/8;
        // makes drawing surface 2d
        var ctx = c.getContext("2d");
        c.parent('canvas_holder');
    </script>

    <script>
        // x & y are 0.5 of w and h
        var def_x = 0.5*c.width;
        var def_y = 0.5*c.height;
        var def_r = 30;

        class Circle{
        //creates circle
            constructor(X, Y, R){
                this.x = X;
                this.y = Y;
                this.r = R;
                console.log("X="+X+", Y="+Y+", Z="+R);
                this.drawCircle();
            }
            drawCircle(){
                //draws circle
                    ctx.beginPath();
                    ctx.arc(this.x, this.y, this.r, 0, 2 * Math.PI,false);
                    ctx.fill();
                console.log("thisX=" + this.x);
                console.log("thisY=" + this.y);
                console.log("thisR=" + this.r);
                
            }
        //returns x, y and r values for later access
            // finds true center
            getX(){
                return (this.x + this.r/Math.sqrt(2));
            }

            getY(){
                return (this.y + this.r/Math.sqrt(2));
            }

            getR(){
                return this.r;
            }
        }
        
        // creates object instantiation of Circle class
        myCircle = new Circle(def_x,def_y,def_r);
        // gets x, y and r of circle
        var x = myCircle.getX();
        console.log("x=" + x);
        var y = myCircle.getY();
        console.log("y=" + y);
        var r = myCircle.getR();
        console.log("r=" + r);
        
        // creates click listener for canvas
        c.addEventListener('click', () => {
            // tracks mouse click location
            function coordinates(event){
                var circleClickey = false;
                var mouseX = event.clientX;
                var mouseY = event.clientY;
                console.log("mouseX="+mouseX+", mouseY="+mouseY);
                // checks for mouse click being within circle
                function isIntersect(bigX, bigY) {
                    var distance = (Math.sqrt(((bigX-x) ** 2) + ((bigY-y) ** 2)));
                    if(distance < r){
                        circleClickey=true;
                    }
                    console.log("distance="+distance);
                    console.log("circleClickey=" + circleClickey);
                }
                isIntersect(mouseX, mouseY);
                // creates clicked animation
                if (circleClickey){
                    expand();
                    var contraction = setInterval(() => { 
                    contractSuperior() 
                    }, 0.1);
                }
            }
        // calls main actions of code
        coordinates(event);
        });
        // creates variables for animation manipulation
        var newR = myCircle.getR();
        var origR = myCircle.getR();
        var growthFactor = 5;
        
    //Creates the effect of a circle expanding
    function expand(){
        //expand
        ctx.beginPath(growthFactor);
            ctx.arc(w/2, h/3, newR, 0, 2 * Math.PI,false);
            ctx.fill();
            newR = newR + 0.8;
            if (newR<(origR+growthFactor)){
                requestAnimationFrame(expand);
            }
    }
 
    //creates the effect of a contracting circle
    function contractSuperior(){
        //stops the intervals once the circle size gets small enough
        if(newR<=origR){
            clearInterval(contraction);
        }
        console.log(newR);
        console.log(origR);
        
        //makes sure that the circle and clearing rectangle are generated at specific intervals
        setTimeout(function(){
            console.log("Timeout white");
            whiteRectangle(newR);
        }, 1000);
        setTimeout(function(){
            console.log("Timeout black");
            blackCircle(newR);
        }, 1000);
        
        //makes the circle size decrease at a specific rate
        newR = newR - 0.05;
    }
    
    //Makes a black circle
    function blackCircle(R){
        ctx.fillStyle = "#000000";
        ctx.beginPath();
        ctx.arc(w/2, h/3, R, 0, 2 * Math.PI,false);
        ctx.fill();
        console.log("Black drawn");
    }
    //Makes a white rectangle
    function whiteRectangle(R){
        var rectFactor = 1.2*R;
        ctx.clearRect((x-R-rectFactor), (y-R-rectFactor), 3*R, 3*R);
    }
    </script>

</body>
</html>
